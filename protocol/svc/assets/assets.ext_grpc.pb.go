// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: svc/assets/assets.ext.proto

package assets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssetsExtClient is the client API for AssetsExt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetsExtClient interface {
	GetUser(ctx context.Context, in *GetUserAssetsReq, opts ...grpc.CallOption) (*GetUserAssetsRsp, error)
}

type assetsExtClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsExtClient(cc grpc.ClientConnInterface) AssetsExtClient {
	return &assetsExtClient{cc}
}

func (c *assetsExtClient) GetUser(ctx context.Context, in *GetUserAssetsReq, opts ...grpc.CallOption) (*GetUserAssetsRsp, error) {
	out := new(GetUserAssetsRsp)
	err := c.cc.Invoke(ctx, "/proto.svc.assets.AssetsExt/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsExtServer is the server API for AssetsExt service.
// All implementations should embed UnimplementedAssetsExtServer
// for forward compatibility
type AssetsExtServer interface {
	GetUser(context.Context, *GetUserAssetsReq) (*GetUserAssetsRsp, error)
}

// UnimplementedAssetsExtServer should be embedded to have forward compatible implementations.
type UnimplementedAssetsExtServer struct {
}

func (UnimplementedAssetsExtServer) GetUser(context.Context, *GetUserAssetsReq) (*GetUserAssetsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

// UnsafeAssetsExtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsExtServer will
// result in compilation errors.
type UnsafeAssetsExtServer interface {
	mustEmbedUnimplementedAssetsExtServer()
}

func RegisterAssetsExtServer(s grpc.ServiceRegistrar, srv AssetsExtServer) {
	s.RegisterService(&AssetsExt_ServiceDesc, srv)
}

func _AssetsExt_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAssetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsExtServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.svc.assets.AssetsExt/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsExtServer).GetUser(ctx, req.(*GetUserAssetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsExt_ServiceDesc is the grpc.ServiceDesc for AssetsExt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsExt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.svc.assets.AssetsExt",
	HandlerType: (*AssetsExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _AssetsExt_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/assets/assets.ext.proto",
}
