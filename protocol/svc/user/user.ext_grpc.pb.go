// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: svc/user/user.ext.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserExtClient is the client API for UserExt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserExtClient interface {
	Signup(ctx context.Context, in *SignupReq, opts ...grpc.CallOption) (*SignupRes, error)
	Signin(ctx context.Context, in *SigninReq, opts ...grpc.CallOption) (*SigninRes, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error)
}

type userExtClient struct {
	cc grpc.ClientConnInterface
}

func NewUserExtClient(cc grpc.ClientConnInterface) UserExtClient {
	return &userExtClient{cc}
}

func (c *userExtClient) Signup(ctx context.Context, in *SignupReq, opts ...grpc.CallOption) (*SignupRes, error) {
	out := new(SignupRes)
	err := c.cc.Invoke(ctx, "/svc.user.UserExt/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExtClient) Signin(ctx context.Context, in *SigninReq, opts ...grpc.CallOption) (*SigninRes, error) {
	out := new(SigninRes)
	err := c.cc.Invoke(ctx, "/svc.user.UserExt/Signin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExtClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserRes, error) {
	out := new(GetUserRes)
	err := c.cc.Invoke(ctx, "/svc.user.UserExt/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserExtServer is the server API for UserExt service.
// All implementations should embed UnimplementedUserExtServer
// for forward compatibility
type UserExtServer interface {
	Signup(context.Context, *SignupReq) (*SignupRes, error)
	Signin(context.Context, *SigninReq) (*SigninRes, error)
	GetUser(context.Context, *GetUserReq) (*GetUserRes, error)
}

// UnimplementedUserExtServer should be embedded to have forward compatible implementations.
type UnimplementedUserExtServer struct {
}

func (UnimplementedUserExtServer) Signup(context.Context, *SignupReq) (*SignupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedUserExtServer) Signin(context.Context, *SigninReq) (*SigninRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signin not implemented")
}
func (UnimplementedUserExtServer) GetUser(context.Context, *GetUserReq) (*GetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

// UnsafeUserExtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserExtServer will
// result in compilation errors.
type UnsafeUserExtServer interface {
	mustEmbedUnimplementedUserExtServer()
}

func RegisterUserExtServer(s grpc.ServiceRegistrar, srv UserExtServer) {
	s.RegisterService(&UserExt_ServiceDesc, srv)
}

func _UserExt_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExtServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.user.UserExt/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExtServer).Signup(ctx, req.(*SignupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExt_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExtServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.user.UserExt/Signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExtServer).Signin(ctx, req.(*SigninReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExt_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExtServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.user.UserExt/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExtServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserExt_ServiceDesc is the grpc.ServiceDesc for UserExt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserExt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "svc.user.UserExt",
	HandlerType: (*UserExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _UserExt_Signup_Handler,
		},
		{
			MethodName: "Signin",
			Handler:    _UserExt_Signin_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserExt_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/user/user.ext.proto",
}
